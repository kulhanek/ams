#!/bin/bash
# ------------------------------------------------------------------------------
# Advanced Module System - personal site management utility
# (c) 2017 Petr Kulhanek
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------

function print_usage()
{
    echo ""
    echo "Usage: ams-personal [-h][--help] <action> [ARGS]"
    echo ""
    echo "Supported actions for administrator (sudo user):"
    echo "   Management of module builds:"
    echo "       addmodules <module1> ...            install modules (only single modes)"
    echo "                                              and update all local builds"
    echo "       addbuilds <[prefix]/bldfilter1> ... install builds specified by full build name or build filter"
    echo "                                              (filter is incomplete buildname with wildcard characters)"
    echo "                                              and update all local builds"
    echo "       rmbuilds <bldfilter1> ...           remove builds specified by full build name or build filter"
    echo "       update                              update all local builds"
    echo "       upgrade                             upgrade modules to the most recent builds (by verindx, only single modes)"
    echo "                                              and update all local builds"
    echo "       debdeps                             install dependent system packages"
    echo ""
    echo "   Personal site setup:"
    echo "       gensshkeys         setup sshkeys for the local infinity user"
    echo "       showsshkey         show the public key of the local infinity user"
    echo "       useradd [user]     add 'user' to the infnity group, if not provided the current user is added"
    echo "       envinit            initialize bash startup files for the current user"
    echo "       addcorebuilds      install AMS core builds"
    echo ""
    echo "Supported actions for ordinary user:"
    echo "   Personal site setup:"
    echo "       initenv            initialize bash startup files for the current user"
    echo ""
    echo "General pre-requisites for a computer:"
    echo "       * ncbr-ams-core-X.Y-personal package must by installed"
    echo "       * passwordless connection to the infinity softrepo must be configured (use 'sshkeys')"
    echo ""
    echo "General pre-requisites for a user employing the infinity environment:"
    echo "       * the user must be a member of the infinity group (use 'useradd')"
    echo "       * the user must have correct bash startup files (use 'envinit')"
    echo ""

}

# ------------------------------------------------------------------------------

function initenv_print_header()
{
    echo ""
    echo "#------------------------------------------------------"
    echo "#    *** Shell Environment Startup File Update ***     "
    echo "#------------------------------------------------------"
}

# ------------------------------------------------------------------------------

function initenv_backup_old_files()
{
    echo ""
    echo "1) Backuping old user startup files ..."

    SEQ=`date +"%s"`
    if [ -f ~/.profile ]; then
        mv ~/.profile ~/.profile.$SEQ
        echo "   ~/.profile        -> ~/.profile.$SEQ"
    fi
    if [ -f ~/.bash_profile ]; then
        mv ~/.bash_profile ~/.bash_profile.$SEQ
        echo "   ~/.bash_profile   -> ~/.bash_profile.$SEQ"
    fi
    if [ -f ~/.bashrc ]; then
        mv ~/.bashrc ~/.bashrc.$SEQ
        echo "   ~/.bashrc         -> ~/.bashrc.$SEQ"
    fi
}

# ------------------------------------------------------------------------------

function initenv_create_new_files()
{
    echo ""
    echo "2) Creating new user startup files ..."

cat << EOF > ~/.bash_profile
#--------------------------------------
# Standard NCBR .bash_profile
#--------------------------------------

# include .bashrc if it exists
if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi
EOF
    echo "   ~/.bash_profile"

cat << EOF > ~/.bashrc
#--------------------------------------
# Standard NCBR .bashrc
#--------------------------------------

# use system wide setup
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi
EOF
    echo "   ~/.bashrc"
}

# ------------------------------------------------------------------------------

function initenv_print_bottom()
{
    echo ""
    echo "#---------------------------------------------------------"
    echo "#                  *** End of update ***                  "
    echo "#                                                         "
    echo "# = NEW SESSION MUST BE OPENED (LOGOUT AND LOGIN AGAIN) = "
    echo "#---------------------------------------------------------"
    echo ""
}

# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------

SHIFT="-"
while [ -n "$SHIFT" ]; do
    SHIFT=""
    case $1 in
        '-h'|'--help')
            print_usage
            exit 0
        ;;
    esac
done

if [ $# -lt 1 ]; then
    echo "" 1>&2
    echo ">>> ERROR: Incorrect number of arguments!" 1>&2
    print_usage
    exit 1
fi

# -----------------------------------------------------------------------------------------

ACTION="$1"
shift

# this action does not require full Infinity activation

case "$ACTION" in
# -----------------------------
    "envinit" )
        initenv_print_header
        initenv_backup_old_files || exit 1
        initenv_create_new_files || exit 1
        initenv_print_bottom
        exit 0
        ;;
esac

# -----------------------------------------------------------------------------------------

# check if AMS_ROOT is set -----------------------

if [ -z "$AMS_ROOT" ]; then
    echo "" 1>&2
    echo ">>> ERROR: AMS_ROOT is not set!" 1>&2
    echo "           You need to modify your startup files by running the command:" 1>&2
    echo ""
    echo "           $ ams-personal initenv" 1>&2
    echo "" 1>&2
    exit 1
fi

if [ "`id -g -n`" == "infinity" ] || [ "`id -u -n`" == "root" ]; then
    echo "" 1>&2
    echo ">>> ERROR: The ams-personal command cannot be run by 'infinity' or 'root' users!" 1>&2
    echo "" 1>&2
    exit 1
fi

id -G -n 2> /dev/null | grep "sudo" &> /dev/null
if [ $? -ne 0 ]; then
    echo "" 1>&2
    echo ">>> ERROR: The user running this script must be in the \"sudo\" group!" 1>&2
    echo "" 1>&2
    exit 1
fi

case "$ACTION" in
# -----------------------------
    "addmodules" )
        sudo -u infinity -i $AMS_ROOT/share/scripts/ams-sync personal bldlib
        echo ""
        echo "# AMS modules for sites: `site listavail 2>&1 | awk '{ if(i>0) printf(","); printf("%s",$1); i++;}' `"
        echo "# ------------------------------------------------------------------------------"
        CORE_BUILDS=""
        for SITE in `site listavail 2>&1`; do
            for MOD in "$@"; do
                CORE_BUILDS="$CORE_BUILDS `ams-map-manip bestbuild $SITE $MOD`"
            done
        done
        CORE_BUILDS="`echo $CORE_BUILDS | tr " " "\n" | sort -u`"
        echo $CORE_BUILDS | tr " " "\n"

        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-addbuilds $CORE_BUILDS
        ;;
# -----------------------------
    "addbuilds" )
        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-addbuilds "$@"
        ;;
# -----------------------------
    "addcorebuilds" )
        sudo -u infinity -i $AMS_ROOT/share/scripts/ams-sync personal bldlib
        echo ""
        echo "# AMS core builds for sites: `site listavail 2>&1 | awk '{ if(i>0) printf(","); printf("%s",$1); i++;}' `"
        echo "# ------------------------------------------------------------------------------"
        CORE_BUILDS=""
        for SITE in `site listavail 2>&1`; do
            for MOD in `site listamods $SITE 2>&1`; do
                CORE_BUILDS="$CORE_BUILDS `ams-map-manip bestbuild $SITE $MOD`"
            done
        done
        CORE_BUILDS="`echo $CORE_BUILDS | tr " " "\n" | sort -u`"
        echo $CORE_BUILDS | tr " " "\n"

        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-addbuilds $CORE_BUILDS
        ;;
# -----------------------------
    "update" )
        sudo -u infinity -i $AMS_ROOT/share/scripts/ams-sync personal softrepo
        ;;
# -----------------------------
    "upgrade" )
        sudo -u infinity -i $AMS_ROOT/share/scripts/ams-sync personal bldlib
        echo ""
        echo "# AMS best builds for sites: `site listavail 2>&1 | awk '{ if(i>0) printf(","); printf("%s",$1); i++;}' `"
        echo "# ------------------------------------------------------------------------------"
        CORE_BUILDS=""
        for SITE in `site listavail 2>&1`; do
            for MOD in `ams-cache --site $SITE allmods`; do
                CORE_BUILDS="$CORE_BUILDS `ams-map-manip bestbuild $SITE $MOD`"
            done
        done
        CORE_BUILDS="`echo $CORE_BUILDS | tr " " "\n" | sort -u`"
        echo $CORE_BUILDS | tr " " "\n"

        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-addbuilds $CORE_BUILDS
        ;;
# -----------------------------
    "rmbuilds" )
        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-rmbuilds "$@"
        ;;
# -----------------------------
    "debdeps" )
        echo ""
        echo "# Installing system dependent packages:"
        echo "# ------------------------------------------------------------------------------"
        PKGS="`ams-cache debdepsall`"
        if [ $? -ne 0 ]; then
            exit 1
        fi
        sudo apt-get install $PKGS
        ;;
# -----------------------------
    "gensshkeys" )
        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-gensshkeys "$@"
        ;;
# -----------------------------
    "showsshkey" )
        sudo -u infinity -i $AMS_ROOT/share/personal/ams-personal-showsshkey "$@"
        ;;
# -----------------------------
    "useradd" )
        AUSER="$2"
        if [ -z "$AUSER" ]; then
            AUSER="`whoami`"
        fi
        sudo $AMS_ROOT/share/personal/ams-personal-useradd "$AUSER"
        ;;
# -----------------------------
    *)
        echo "" 1>&2
        echo ">>> ERROR: Unsupported action!" 1>&2
        print_usage
        exit 1
        ;;
esac







