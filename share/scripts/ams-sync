#!/bin/bash
# ------------------------------------------------------------------------------
# Advanced Module System synchronization utility
# (c) 2010,2016 Petr Kulhanek
# ------------------------------------------------------------------------------

# ------------------------------------------------

function print_usage()
{
    echo ""
    echo "Usage: ams-sync [-h][--help] <profile/alias> [action] [build]"
    echo ""
    echo "       Actions: all amscore bldlib softrepo build dpkg rmindx (for rsync mode)"
    echo "                exec (for exec mode) only via profile"
    echo ""
}

# ------------------------------------------------

function get_profile_action()
{
    # input $1 - action from command line

    export AMS_SYNC_ACTION="`grep ACTION $PROFILE | awk '{print $2;}'`"
    if [ -n  "$AMS_SYNC_ACTION" ]; then
    echo "Action:  $AMS_SYNC_ACTION"
        case "$AMS_SYNC_ACTION" in
            "all" | "amscore" | "bldlib" | "softrepo" | "build" | "dpkg" | "rmindx" | "exec")
                ;;
            *)
                echo "" 1>&2
                echo ">>> ERROR: ACTION key is incorrect!" 1>&2
                echo "    Supported actions: amscore bldlib softrepo build dpkg exec"
                echo "" 1>&2
                exit 1
                ;;
        esac
        if [ -n "$1" ]; then
            echo "" 1>&2
            echo ">>> ERROR: ACTION is specified both in the profile ($AMS_SYNC_ACTION) and via the command line ($1)!" 1>&2
            echo "" 1>&2
            exit 1
        fi
    else
        AMS_SYNC_ACTION="$1"
    fi

}

# ------------------------------------------------

function read_profile_rsync()
{
    export AMS_SRC_HOST="`grep SOURCE "$PROFILE" | awk '{print $2;}'`"
    echo "  Source:                 $AMS_SRC_HOST"
    if [ -z "$AMS_SRC_HOST" ]; then
        echo "" 1>&2
        echo ">>> ERROR: SOURCE key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    export AMS_SRC_SOFTMODS="`grep SRC_SOFTMODS "$PROFILE" | awk '{print $2;}'`"
    echo "  Source softmods:        $AMS_SRC_SOFTMODS"
    if [ -z "$AMS_SRC_SOFTMODS" ]; then
        echo "" 1>&2
        echo ">>> ERROR: SRC_SOFTMODS key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    export AMS_SRC_SOFTREPO="`grep SRC_SOFTREPO "$PROFILE" | awk '{print $2;}'`"
    echo "  Source softrepo:        $AMS_SRC_SOFTREPO"
    if [ -z "$AMS_SRC_SOFTREPO" ]; then
        echo "" 1>&2
        echo ">>> ERROR: SRC_SOFTREPO key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    export AMS_DST_HOST="`grep DESTINATION "$PROFILE" | awk '{print $2;}'`"
    echo "  Destination:            $AMS_DST_HOST"
    if [ -z "$AMS_DST_HOST" ]; then
        echo "" 1>&2
        echo ">>> ERROR: DESTINATION key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    if [ "$AMS_SYNC_ACTION" == "dpkg" ]; then
    export AMS_DST_DPKGROOT="`grep DST_DPKGROOT "$PROFILE" | awk '{print $2;}'`"
    echo "  Destination package:    $AMS_DST_DPKGROOT"
    if [ -z "$AMS_DST_DPKGROOT" ]; then
        echo "" 1>&2
        echo ">>> ERROR: DST_DPKGROOT key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi
    fi

    export AMS_DST_SOFTMODS="`grep DST_SOFTMODS "$PROFILE" | awk '{print $2;}'`"
    echo "  Destination softmods:   $AMS_DST_SOFTMODS"
    if [ -z "$AMS_DST_SOFTMODS" ]; then
        echo "" 1>&2
        echo ">>> ERROR: DST_SOFTMODS key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    export AMS_DST_SOFTREPO="`grep DST_SOFTREPO "$PROFILE" | awk '{print $2;}'`"
    echo "  Destination softrepo:   $AMS_DST_SOFTREPO"
    if [ -z "$AMS_DST_SOFTREPO" ]; then
        echo "" 1>&2
        echo ">>> ERROR: DST_SOFTREPO key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    export AMS_SYNC_DIRECTION="`grep DIRECTION $PROFILE | awk '{print $2;}'`"
    echo "  Sync direction:         $AMS_SYNC_DIRECTION"
    case "$AMS_SYNC_DIRECTION" in
        "push" | "pull" )
            ;;
        *)
            echo "" 1>&2
            echo ">>> ERROR: DIRECTION key is not defined or is incorrect!" 1>&2
            echo "" 1>&2
            exit 1
            ;;
    esac

    export AMS_SYNC_AUTH="`grep AUTH $PROFILE | awk '{print $2;}'`"
    echo "  Authentication mode:    $AMS_SYNC_AUTH"
    case "`echo "$AMS_SYNC_AUTH" | cut -f 1 -d "("`" in
        "AFS" | "POSIX" )
            ;;
        *)
            echo "" 1>&2
            echo ">>> ERROR: AUTH key is not defined or is incorrect!" 1>&2
            echo "" 1>&2
            exit 1
            ;;
    esac
    
    export AMS_RSYNC_OPTS="`grep RSYNCOPTS "$PROFILE" | awk '{for(i=2;i<=NF;i++) printf("%s ", $i);}'`"
    if [ -n "$AMS_RSYNC_OPTS" ]; then
    echo "  rsync options:          $AMS_RSYNC_OPTS"
    fi

    export AMS_SYNC_SITES="`grep SITES "$PROFILE" | awk '{for(i=2;i<=NF;i++) printf("%s ", $i);}'`"
    echo "  Sync sites:             $AMS_SYNC_SITES"
    if [ -z "$AMS_SYNC_SITES" ]; then
        echo "" 1>&2
        echo ">>> ERROR: SITES key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    if [ "$AMS_SYNC_DIRECTION" == "pull" ]; then
    export AMS_MASTER_INDEX="`grep MASTER_INDEX "$PROFILE" | awk '{print $2;}'`"
    echo "  Master index:           $AMS_MASTER_INDEX"
    if [ -z "$AMS_SYNC_SITES" ]; then
        echo "" 1>&2
        echo ">>> ERROR: SITES key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi
    fi
}

# ------------------------------------------------

function read_profile_exec()
{
    export AMS_WORKING_DIR="`grep CWD "$PROFILE" | awk '{print $2;}'`"
    echo "  Working directory: $AMS_WORKING_DIR"
    if [ -z "$AMS_WORKING_DIR" ]; then
        echo "" 1>&2
        echo ">>> ERROR: CWD key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    export AMS_COMMAND="`grep CMD "$PROFILE" | awk '{ for(i=2;i<=NF;i++) {printf("%s ",$i);} }'`"
    echo "  Command:           $AMS_COMMAND"
    if [ -z "$AMS_COMMAND" ]; then
        echo "" 1>&2
        echo ">>> ERROR: CMD key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi
}

# ------------------------------------------------

function sync_profile() {

    echo ""
    echo "# AMS Synchronization"
    echo "# ------------------------------------------------"
    echo "# Profile: $AMS_SYNC_PROFILE"

# check/create session lock
    if [ -f "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/lock.pid" ]; then
        PID="`cat "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/lock.pid"`"
        if [ -n "$PID" ] && [ -d "/proc/$PID" ]; then
            echo "" 1>&2
            echo ">>> ERROR: Profile $1 is used by someone else (PID: $PID)!" 1>&2
            echo "" 1>&2
            exit 1
        fi
    fi
    mkdir -p "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/"
    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo ">>> ERROR: Unable to create $AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/ directory!" 1>&2
        echo "" 1>&2
        exit 1
    fi
    echo $$ > "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/lock.pid"
    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo ">>> ERROR: Unable to lock session!" 1>&2
        echo "" 1>&2
        exit 1
    fi

# read profile
    read_profile_rsync

# check authentication credentials
    echo ""
    case "`echo "$AMS_SYNC_AUTH" | cut -f 1 -d "("`" in
        "AFS"  )
            echo ">>> AFS mode ..."
            AFS_CELL="`echo "$AMS_SYNC_AUTH" | tr "()" " " | awk '{ print $2;}'`"
            if [ -z "$AFS_CELL" ]; then
                echo "" 1>&2
                echo ">>> ERROR: AFS cell is not specified!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            echo "    AFS cell: $AFS_CELL"
            if (! (tokens | grep "$AFS_CELL" &> /dev/null)) || (tokens | grep "$AFS_CELL" | grep -i "Expired" &> /dev/null); then
                echo "" 1>&2
                echo ">>> ERROR: Tokens to access AFS does not exist or are expired!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            ;;
        "POSIX" )
            echo ">>> POSIX mode ..."
            ;;
        *)
            echo "" 1>&2
            echo ">>> ERROR: AUTH key is not defined or is incorrect!" 1>&2
            echo "" 1>&2
            exit 1
            ;;
    esac


    case "$AMS_SYNC_DIRECTION" in
    # -----------------------------
        "push" )
            AMS_SRC_HOSTNAME="`echo $AMS_SRC_HOST | cut -f 2 -d @`"
            if [ $AMS_SRC_HOSTNAME != "$HOSTNAME" ]; then
                echo "" 1>&2
                echo ">>> ERROR: Sync can be done only from the source machine '$AMS_SRC_HOSTNAME'!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            AMS_SRC_USER="`echo $AMS_SRC_HOST | cut -f 1 -d @`"
            if [ $AMS_SRC_USER != "$USER" ]; then
                echo "" 1>&2
                echo ">>> ERROR: Sync can be done only by the '$USER' user!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            if [ "$AMS_SRC_SOFTMODS" != "$AMS_ROOT" ]; then
                echo "" 1>&2
                echo ">>> ERROR: In the push mode, AMS_SRC_SOFTMODS must be the same as AMS_ROOT!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            if [ "$AMS_SRC_SOFTREPO" != "$SOFTREPO" ]; then
                echo "" 1>&2
                echo ">>> ERROR: In the push mode, AMS_SRC_SOFTREPO must be the same as SOFTREPO!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            $AMS_ROOT/share/sync/rsync/ams-rsync-push "$AMS_SYNC_ACTION" "$3"
            ;;
    # -----------------------------
        "pull" )
            AMS_DST_USER="`echo $AMS_DST_HOST | cut -f 1 -d @`"
            export AMS_DST_USER
            if [ "$AMS_DST_USER" != "$USER" ]; then
                echo "" 1>&2
                echo ">>> ERROR: Sync can be initialized only by '$AMS_DST_USER' user!" 1>&2
                echo "" 1>&2
                exit 1
            fi
            $AMS_ROOT/share/sync/rsync/ams-rsync-pull "$AMS_SYNC_ACTION" "$3"
            ;;
    # -----------------------------
        *)
            echo "" 1>&2
            echo ">>> ERROR: DIRECTION key is not defined or is incorrect!" 1>&2
            echo "" 1>&2
            exit 1
            ;;
    esac

# unlock session
    rm -f "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/lock.pid"
}

# ------------------------------------------------

function exec_profile() {

    echo ""
    echo "# AMS Command Execution"
    echo "# ------------------------------------------------"
    echo "# Profile:           $AMS_SYNC_PROFILE"

    read_profile_exec

    cd $AMS_WORKING_DIR
    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo ">>> ERROR: Unable to set the working directory '$AMS_WORKING_DIR'!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    echo ""
    echo "--------------------"
    eval "$AMS_COMMAND"
    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo ">>> ERROR: Unable to execute the command '$AMS_COMMAND'!" 1>&2
        echo "" 1>&2
        exit 1
    fi
    echo "--------------------"
    echo ""
}

# ------------------------------------------------

function run_profile()
{
    echo ""
    echo "# AMS Sync Profile: $1"
    echo "# ------------------------------------------------------------------------------"

    PROFILE="$AMS_ROOT/etc/sync/$1.conf"
    if ! [ -f "$PROFILE" ]; then
        echo "" 1>&2
        echo ">>> ERROR: Profile '$1' is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi
    export AMS_SYNC_PROFILE="$1"

    # decode action
    get_profile_action "$2"

    case "$AMS_SYNC_ACTION" in
    # -----------------------------
        "exec" )
            exec_profile "$@"
        ;;
        *)
            sync_profile "$@"
        ;;
    esac
}

# ------------------------------------------------

SHIFT="-"
while [ -n "$SHIFT" ]; do
    SHIFT=""
    case $1 in
        '-h'|'--help')
            print_usage
            exit 0
        ;;
    esac
done

if [ $# -lt 1 ]; then
    echo "" 1>&2
    echo ">>> ERROR: Incorrect number of parameters!" 1>&2
    print_usage
    exit 1
fi

# check if AMS_ROOT is set -----------------------

if [ -z "$AMS_ROOT" ]; then
    echo "" 1>&2
    echo ">>> ERROR: AMS_ROOT is not set!" 1>&2
    echo "" 1>&2
    exit 1
fi

if [ -f "$AMS_ROOT/etc/sync/$1.alias" ]; then
    echo ""
    echo "# ------------------------------------------------------------------------------"
    echo ">>> ALIAS: $1"
    echo "# ------------------------------------------------------------------------------"

    while read LINE; do
        if [ -n "$LINE" ]; then
            echo ""
            echo "# ------------------------------------------------------------------------------"
            echo "# Alias '$1' command: $LINE"
            echo "# ------------------------------------------------------------------------------"
            run_profile $LINE < /dev/null
        fi
    done < <( cat "$AMS_ROOT/etc/sync/$1.alias" )
else
   run_profile "$@"
fi






