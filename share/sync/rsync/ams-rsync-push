#!/bin/bash
# =============================================================================
# AMS - Advanced Module System
# (c) 2010,2016,2017 Petr Kulhanek
# -----------------------------------------------------------------------------
# ams-rsync-push - synchronize software repository in push mode
#
# ams-rsync-push [action] [build]
#
# actions: rmindx amscore dpkg softrepo build
#

# we have piped commands and all must succeed
set -o pipefail

# -----------------------------------------------------------------------------

if [ -z "$AMS_SYNC_PROFILE" ]; then
    echo ">>> ERROR: AMS_SYNC_PROFILE is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_DST_HOST" ]; then
    echo ">>> ERROR: AMS_DST_HOST is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_DST_SOFTMODS" ]; then
    echo ">>> ERROR: AMS_DST_SOFTMODS is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_DST_SOFTREPO" ]; then
    echo ">>> ERROR: AMS_DST_SOFTREPO is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_SYNC_SITES" ]; then
    echo ">>> ERROR: AMS_SYNC_SITES is not set!" 1>&2
    exit 1
fi

# ------------------------------------------------------------------------------

# check if AMS_ROOT is set -----------------------

if [ -z "$AMS_ROOT" ]; then
    echo "" 1>&2
    echo ">>> ERROR: AMS_ROOT is not set!" 1>&2
    echo "" 1>&2
    exit 1
fi

# check if SOFTREPO is set -----------------------

if [ -z "$SOFTREPO" ]; then
    echo "" 1>&2
    echo ">>> ERROR: SOFTREPO is not set!" 1>&2
    echo "" 1>&2
    exit 1
fi

umask 027
mkdir -p "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/logs"
if [ $? -ne 0 ]; then
    echo "" 1>&2
    echo ">>> ERROR: Unable to create $AMS_ROOT/var/$AMS_SYNC_PROFILE/logs directory!" 1>&2
    echo "" 1>&2
    exit 1
fi

# log file
LOG_FILE="$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/logs/`date +%Y-%m-%d#%H:%M:%S`.log"

echo ">>> Log file: $LOG_FILE"

# indexes
NEW_INDEX="$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/index.new"
OLD_INDEX="$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/index.old"
if ! [ -f "$OLD_INDEX" ]; then touch "$OLD_INDEX"; fi

# -------------------------------------------------------------------------------------

show_log_error()
{
    echo "" 1>&2
    echo ">>> ERROR: Log file: $LOG_FILE" 1>&2
    echo "    Last 10 lines ..." 1>&2
    tail -10 "$LOG_FILE" | awk '{ printf("    %s\n",$0); }' 1>&2
    echo "" 1>&2
}

# -------------------------------------------------------------------------------------

test_password_less_ssh()
{
    echo -n ">>> Testing connection to: $AMS_SRC_HOST ... " | tee -a $LOG_FILE
    ssh -x -o "BatchMode=yes" -o "StrictHostKeyChecking=no" "$AMS_SRC_HOST" "/bin/echo" >> $LOG_FILE 2>&1
    if [ $? -ne 0 ]; then
        echo "failure" | tee -a $LOG_FILE
        echo "" 1>&2
        echo ">>> ERROR: Passwordless ssh connection with $AMS_SRC_HOST is not available!"  1>&2
        echo "" 1>&2
        show_log_error
        exit 1
    fi
    echo "success" | tee -a $LOG_FILE
}

# -------------------------------------------------------------------------------------

rsync_amscore_cache()
{
    echo "" | tee -a $LOG_FILE
    echo "# AMS core - update site caches" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    umask 022
    SITES="`echo $AMS_SYNC_SITES | tr ' ' '\n' | awk '{ if( NR > 1 ) printf(","); printf("%s",$1) }'`"
    $AMS_ROOT/bin/ams-cache --sites "$SITES" rebuildall >> $LOG_FILE 2>&1
    if [ $? -eq 0 ]; then
        echo "AMS module cache updated             ... [OK]"
    else
        echo "AMS module cache updated             ... [FAILED]"
        show_log_error
        exit 1
    fi

}

# -------------------------------------------------------------------------------------

rsync_amscore()
{
    echo "" | tee -a $LOG_FILE
    echo "# AMS core - sync data" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    ssh -x $AMS_DST_HOST "umask 022; if ! [ -d "$AMS_DST_SOFTMODS" ]; then mkdir -p "$AMS_DST_SOFTMODS" ; fi;" >> $LOG_FILE 2>&1
    if [ $? -ne 0 ]; then exit 1; fi

    rsync -e "ssh -x" -av --delete $AMS_RSYNC_OPTS --exclude-from=$AMS_ROOT/share/sync/rsync/ams-exclude-rules-core \
         "$AMS_SRC_SOFTMODS/" "$AMS_DST_HOST:$AMS_DST_SOFTMODS/" >> $LOG_FILE 2>&1

    if [ $? -eq 0 ]; then
        echo "AMS core synchronization             ... [OK]"
    else
        echo "AMS core synchronization             ... [FAILED]"
        show_log_error
        exit 1
    fi
}

# -------------------------------------------------------------------------------------

rsync_dpkg()
{
    if [ -z "$AMS_DST_DPKGROOT" ];then
        echo "" 1>&2
        echo ">>> ERROR: AMS_DST_DPKGROOT key is not defined!" 1>&2
        echo "" 1>&2
        exit 1
    fi

    umask 022

    echo "" | tee -a $LOG_FILE
    echo "# AMS dpkg - sync data" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    ssh -x $AMS_DST_HOST "umask 022; if ! [ -d \"$AMS_DST_DPKGROOT\" ]; then mkdir -p \"$AMS_DST_DPKGROOT\" ; fi;" >> $LOG_FILE 2>&1
    if [ $? -ne 0 ]; then exit 1; fi

    ssh -x $AMS_DST_HOST "umask 022; if ! [ -d \"$AMS_DST_SOFTMODS\" ]; then mkdir -p \"$AMS_DST_SOFTMODS\" ; fi;" >> $LOG_FILE 2>&1
    if [ $? -ne 0 ]; then exit 1; fi

    rsync -e "ssh -x" -av --delete $AMS_RSYNC_OPTS --chmod=u+rwX,og+rX,og-w --exclude-from=$AMS_ROOT/share/sync/rsync/ams-exclude-rules-dpkg \
         "$AMS_SRC_SOFTMODS/" "$AMS_DST_HOST:$AMS_DST_SOFTMODS/" >> $LOG_FILE 2>&1

    if [ $? -eq 0 ]; then
        echo "AMS core synchronization ... [OK]"
    else
        echo "AMS core synchronization ... [FAILED]"
        show_log_error
        exit 1
    fi

    # sync site setups

    ssh -x $AMS_DST_HOST "umask 022; rm -rf \"$AMS_DST_SOFTMODS/etc/sites\"; mkdir -p \"$AMS_DST_SOFTMODS/etc/sites\"" >> $LOG_FILE 2>&1
    if [ $? -ne 0 ]; then exit 1; fi

    for SITE in $AMS_SYNC_SITES; do
        SITEID=`site id $SITE 2>&1`
        if [ -z "$SITEID" ]; then
            echo "Undefined site '$SITE'"
            exit 1
        fi
        rsync -e "ssh -x" -av --delete $AMS_RSYNC_OPTS --chmod=u+rwX,og+rX,og-w --exclude-from=$AMS_ROOT/share/sync/rsync/ams-exclude-rules-site  \
             "$AMS_SRC_SOFTMODS/etc/sites/$SITEID" "$AMS_DST_HOST:$AMS_DST_SOFTMODS/etc/sites/" >> $LOG_FILE 2>&1

        if [ $? -eq 0 ]; then
            echo "AMS site '$SITE' synchronization ... [OK]"
        else
            echo "AMS site '$SITE' synchronization ... [FAILED]"
            show_log_error
            exit 1
        fi
    done

    # gen new control file
    VERSION="`cat \"$AMS_SRC_SOFTMODS/var/sync/$AMS_SYNC_PROFILE/dpkgver\" 2>/dev/null`"
    ((VERSION++))
    sed -e "s/VERSION/$VERSION/g" < "$AMS_SRC_SOFTMODS/share/dpkg/DEBIAN/control.tmp" > "$AMS_SRC_SOFTMODS/share/dpkg/DEBIAN/control"
    echo "$VERSION" > "$AMS_SRC_SOFTMODS/var/sync/$AMS_SYNC_PROFILE/dpkgver"

    # copy DEBIAN package setup
    rsync -e "ssh -x" -av --delete $AMS_RSYNC_OPTS --chmod=u+rwX,og+rX,og-w --exclude-from=$AMS_ROOT/share/sync/rsync/ams-exclude-rules-ctrl \
         "$AMS_SRC_SOFTMODS/share/dpkg/DEBIAN" "$AMS_DST_HOST:$AMS_DST_DPKGROOT/" >> $LOG_FILE 2>&1

    if [ $? -eq 0 ]; then
        echo "AMS dpkg synchronization ... [OK]"
    else
        echo "AMS dpkg synchronization ... [FAILED]"
        show_log_error
        exit 1
    fi

    return 0
}

# -------------------------------------------------------------------------------------

rsync_softrepo()
{
# create new index file
    echo "" | tee -a $LOG_FILE
    echo "# AMS softrepo - generating new repository index" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    SITES="`echo $AMS_SYNC_SITES | tr ' ' '\n' | awk '{ if( NR > 1 ) printf(","); printf("%s",$1) }'`"
    $AMS_ROOT/bin/ams-repoindex-create-ams --sites "$SITES" "$NEW_INDEX" --verbose | tee -a $LOG_FILE
    if [ $? -ne 0 ]; then exit 1; fi;

    echo "# Changed builds ..." | tee -a $LOG_FILE
    $AMS_ROOT/bin/ams-repoindex-diff "$OLD_INDEX" "$NEW_INDEX" | tee -a $LOG_FILE
    if [ $? -ne 0 ]; then exit 1; fi;

    NCHANGES="`$AMS_ROOT/bin/ams-repoindex-diff "$OLD_INDEX" "$NEW_INDEX" | wc -l`"
    if [ "$NCHANGES" -eq 0 ]; then
        echo "> No changed builds were detected ..."
        rm -f "$NEW_INDEX"
        return
    fi

# propagate changes
    echo "" | tee -a $LOG_FILE
    echo "# AMS softrepo - sync data" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    $AMS_ROOT/bin/ams-repoindex-diff --skipremoved "$OLD_INDEX" "$NEW_INDEX" | while read STATUS SHA1 BUILD AMS_PACKAGE_DIR; do
        (
        printf "%-60s " "$BUILD"
        echo "==== $BUILD" >> $LOG_FILE

        if ! [ -d "$AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/" ]; then
            echo " - [ERROR] - package directory does not exists: $AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/"
            exit 1
        fi

    # get list of root app directories and their setup (permision and group)
        BACKUP_PWD=$PWD
        cd $AMS_SRC_SOFTREPO
        echo $AMS_PACKAGE_DIR | tr '/' '\n' | while read A; do
            stat --format="%n %G %a" "$A"
            cd $A
        done > /tmp/perms.$$ 2>> $LOG_FILE
        cd $BACKUP_PWD

    # create app root directory
        cat /tmp/perms.$$ | ssh -x $AMS_DST_HOST "cd $AMS_DST_SOFTREPO; while read NAME GROUP PERM; do mkdir -p \$NAME; chmod \$PERM \$NAME; chgrp \$GROUP \$NAME; cd \$NAME; done" >> $LOG_FILE 2>&1
        rm -f /tmp/perms.$$ >> $LOG_FILE 2>&1

    # copy data
        rsync -e "ssh -x" --timeout=50000 -av --delete $AMS_RSYNC_OPTS "$AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/" "$AMS_DST_HOST:$AMS_DST_SOFTREPO/$AMS_PACKAGE_DIR/" >> $LOG_FILE 2>&1
        if [ $? -ne 0 ]; then
            echo "             [FAILED]"
            show_log_error
            exit 1
        else
            echo "             [SYNC]"
        fi
        ) < /dev/null
        if [ $? -ne 0 ]; then exit 1; fi
    done

# commit changes
    mv "$NEW_INDEX" "$OLD_INDEX"
}

# -------------------------------------------------------------------------------------

rsync_build()
{
    echo "" | tee -a $LOG_FILE
    echo "# AMS softrepo - sync builds: $1" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    PREFIX="`dirname "$1"`"
    BUILD="`basename "$1"`"
    if [ "$PREFIX" == "." ]; then PREFIX=""; fi

    BUILDS=`ams-map-manip --prefix "$PREFIX" showautobuilds all "$BUILD" 2> /dev/null`

    for BUILD in $BUILDS; do

        PREFIX="`dirname "$BUILD"`"
        BUILD="`basename "$BUILD"`"
        if [ "$PREFIX" == "." ]; then PREFIX=""; fi

        printf "%-60s " "$PREFIX/$BUILD"
        echo "==== $PREFIX/$BUILD ($AMS_PACKAGE_DIR)" >> $LOG_FILE

        AMS_PACKAGE_DIR=`ams-map-manip --prefix "$PREFIX" getpkgdir all "$BUILD" 2> /dev/null`

        if [ -z "$AMS_PACKAGE_DIR" ]; then
            echo " [NOPKGDIR]"
            continue
        fi

        if ! [ -d "$AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/" ]; then
            echo " - [ERROR] - AMS_PACKAGE_DIR does not exists: $AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/"
            exit 1
        fi

        # get list of root app directories and their setup (permision and group)
        BACKUP_PWD=$PWD
        cd $AMS_SRC_SOFTREPO
        echo $AMS_PACKAGE_DIR | tr '/' '\n' | while read A; do
            stat --format="%n %G %a" "$A"
            cd $A
        done > /tmp/perms.$$ 2>> $LOG_FILE
        cd $BACKUP_PWD

        # create app root directory
        cat /tmp/perms.$$ | ssh -x $AMS_DST_HOST "cd $AMS_DST_SOFTREPO; while read NAME GROUP PERM; do mkdir -p \$NAME; chmod \$PERM \$NAME; chgrp \$GROUP \$NAME; cd \$NAME; done" >> $LOG_FILE 2>&1
        rm -f /tmp/perms.$$ >> $LOG_FILE 2>&1

        # copy data
        rsync -e "ssh -x" --timeout=50000 -av --delete $AMS_RSYNC_OPTS "$AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/" "$AMS_DST_HOST:$AMS_DST_SOFTREPO/$AMS_PACKAGE_DIR/" >> $LOG_FILE 2>&1
        if [ $? -ne 0 ]; then
            echo "             [FAILED]"
            show_log_error
            exit 1
        else
            echo "             [SYNC]"
        fi
    done
}

# ==============================================================================
# ------------------------------------------------------------------------------
# ==============================================================================

test_password_less_ssh

ACTION="$1"
if [ -z "$ACTION" ]; then ACTION="all"; fi;

case "$ACTION" in
    "all")
        rsync_amscore_cache
        if [ $? -ne 0 ]; then exit 1; fi;
        rsync_softrepo
        if [ $? -ne 0 ]; then exit 1; fi;
        rsync_amscore
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    "rmindx")
        rm -f "$NEW_INDEX"
        rm -f "$OLD_INDEX"
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    "amscore")
        rsync_amscore_cache
        if [ $? -ne 0 ]; then exit 1; fi;
        rsync_amscore
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    "dpkg")
        rsync_dpkg
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    "softrepo")
        rsync_amscore_cache
        if [ $? -ne 0 ]; then exit 1; fi;
        rsync_softrepo
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    "build")
        rsync_amscore_cache
        if [ $? -ne 0 ]; then exit 1; fi;
        rsync_build "$2"
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    *)
        echo "" 1>&2
        echo ">>> ERROR: ACTION '$ACTION' is not supported!" 1>&2
        echo "" 1>&2
    ;;
esac

echo ""
echo "END: Log file is in: $LOG_FILE"
echo ""

exit 0

# -------------------------------------------------------------------------------------
