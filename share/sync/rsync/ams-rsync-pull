#!/bin/bash
# =============================================================================
# AMS - Advanced Module System
# (c) 2010,2016,2017 Petr Kulhanek
# -----------------------------------------------------------------------------
# ams-rsync-pull - synchronize software repository in pull mode
#
# ams-rsync-pull [action]
#
# actions: amsbuilds softrepo

# we have piped commands and all must succeed
set -o pipefail

# -----------------------------------------------------------------------------

if [ -z "$AMS_SYNC_PROFILE" ]; then
    echo ">>> ERROR: AMS_SYNC_PROFILE is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_DST_HOST" ]; then
    echo ">>> ERROR: AMS_DST_HOST is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_DST_SOFTMODS" ]; then
    echo ">>> ERROR: AMS_DST_SOFTMODS is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_DST_SOFTREPO" ]; then
    echo ">>> ERROR: AMS_DST_SOFTREPO is not set!" 1>&2
    exit 1
fi
if [ -z "$AMS_SYNC_SITES" ]; then
    echo ">>> ERROR: AMS_SYNC_SITES is not set!" 1>&2
    exit 1
fi

# ------------------------------------------------------------------------------

# check if AMS_ROOT is set -----------------------

if [ -z "$AMS_ROOT" ]; then
    echo "" 1>&2
    echo ">>> ERROR: AMS_ROOT is not set!" 1>&2
    echo "" 1>&2
    exit 1
fi

# check if SOFTREPO is set -----------------------

if [ -z "$SOFTREPO" ]; then
    echo "" 1>&2
    echo ">>> ERROR: SOFTREPO is not set!" 1>&2
    echo "" 1>&2
    exit 1
fi

mkdir -p "$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/logs"
if [ $? -ne 0 ]; then
    echo "" 1>&2
    echo ">>> ERROR: Unable to create $AMS_ROOT/var/$AMS_SYNC_PROFILE/logs directory!" 1>&2
    echo "" 1>&2
    exit 1
fi

# log file
LOG_FILE="$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/logs/`date +%Y-%m-%d#%H:%M:%S`.log"

echo ""
echo ">>> Log file: $LOG_FILE"

# indexes
NEW_INDEX="$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/index.new"
MST_INDEX="$AMS_ROOT/var/sync/$AMS_SYNC_PROFILE/index.mst"

ACTION=$1
if [ -z "$ACTION" ]; then ACTION="all"; fi;

# -------------------------------------------------------------------------------------

test_password_less_ssh()
{
    ssh -x -o "BatchMode=yes" "$AMS_SRC_HOST" "/bin/echo" &> /dev/null
    if [ $? -ne 0 ]; then
        echo "" 1>&2
        echo ">>> ERROR: Passwordless ssh connection with $AMS_SRC_HOST is not available!"  1>&2
        echo "" 1>&2
        exit 1
    fi
}

# -------------------------------------------------------------------------------------

rsync_amscore_cache()
{
    echo "" | tee -a $LOG_FILE
    echo "# AMS core - update site caches" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    SITES="`echo $AMS_SYNC_SITES | tr ' ' '\n' | awk '{ if( NR > 1 ) printf(","); printf("%s",$1) }'`"
    $AMS_ROOT/bin/ams-cache --sites "$SITES" rebuildall | tee -a $LOG_FILE
    if [ $? -ne 0 ]; then exit 1; fi;
}

# -------------------------------------------------------------------------------------

rsync_amsbuilds()
{
    echo "" | tee -a $LOG_FILE
    echo "# AMS builds and master index - sync data" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    umask 022
    if ! [ -d "$AMS_DST_SOFTMODS/etc/map" ]; then
        mkdir -p "$AMS_DST_SOFTMODS/etc/map"
        if [ $? -ne 0 ]; then exit 1; fi;
    fi

    rsync -e "ssh -x" -av --delete $AMS_RSYNC_OPTS --chmod=u+rwX,og+rX,og-w --exclude-from=$AMS_ROOT/share/sync/rsync/ams-exclude-rules-blds \
         "$AMS_SRC_HOST:$AMS_SRC_SOFTMODS/etc/map/" "$AMS_DST_SOFTMODS/etc/map/" >> $LOG_FILE 2>&1

    if [ $? -eq 0 ]; then
        echo "AMS builds synchronization [OK]"
        return 0
    else
        echo "AMS builds synchronization [FAILED]"
        exit 1
    fi

    if [ -n "$AMS_MASTER_INDEX" ]; then
        scp -x "$AMS_SRC_HOST:$AMS_SRC_SOFTMODS/var/sync/$AMS_MASTER_INDEX/index.new" "$MST_INDEX" >> $LOG_FILE 2>&1

        if [ $? -eq 0 ]; then
            echo "AMS master index synchronization [OK]"
            return 0
        else
            echo "AMS master index synchronization [FAILED]"
            exit 1
        fi
    fi
}

# -------------------------------------------------------------------------------------

rsync_softrepo()
{
# create new index file
    echo "" | tee -a $LOG_FILE
    echo "# AMS softrepo - generating new repository index" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    SITES="`echo $AMS_SYNC_SITES | tr ' ' '\n' | awk '{ if( NR > 1 ) printf(","); printf("%s",$1) }'`"
    $AMS_ROOT/bin/ams-repoindex-create --sites "$SITES" "$NEW_INDEX" --verbose | tee -a $LOG_FILE
    if [ $? -ne 0 ]; then exit 1; fi;

    echo "# Changed builds ..." | tee -a $LOG_FILE
    $AMS_ROOT/bin/ams-repoindex-diff "$MST_INDEX" "$NEW_INDEX" | tee -a $LOG_FILE
    if [ $? -ne 0 ]; then exit 1; fi;

    NCHANGES="`$AMS_ROOT/bin/ams-repoindex-diff "$MST_INDEX" "$NEW_INDEX" | wc -l`"
    if [ "$NCHANGES" -eq 0 ]; then
        echo "> No changed builds were detected ..."
        return
    fi

# propagate changes
    echo "" | tee -a $LOG_FILE
    echo "# AMS softrepo - sync data" | tee -a $LOG_FILE
    echo "#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" | tee -a $LOG_FILE

    $AMS_ROOT/bin/ams-repoindex-diff --skipremoved "$MST_INDEX" "$NEW_INDEX" | while read STATUS SHA1 BUILD AMS_PACKAGE_DIR; do
        (
        printf "%-60s " "$BUILD"
        echo "==== $BUILD" >> $LOG_FILE

    # get list of root app directories and their setup (permision and group)
        ssh -x $AMS_SRC_HOST "cd $AMS_SRC_SOFTREPO; echo $AMS_PACKAGE_DIR | tr '/' '\n' | while read A; do stat --format=\"%n %G %a\" \$A; cd \$A; done" > /tmp/perms.$$ 2>> $LOG_FILE

    # create app root directory
        BACKUP_PWD=$PWD
        cd $AMS_DST_SOFTREPO
        cat /tmp/perms.$$ | while read NAME GROUP PERM; do
            mkdir -p $NAME
            chmod $PERM $NAME
            chgrp $GROUP $NAME
            cd $NAME
        done >> $LOG_FILE 2>&1
        cd $BACKUP_PWD
        rm -f /tmp/perms.$$ >> $LOG_FILE 2>&1

    # copy data
        rsync -e "ssh -x" --timeout=50000 -av --delete $AMS_RSYNC_OPTS \
              "$AMS_SRC_HOST:$AMS_SRC_SOFTREPO/$AMS_PACKAGE_DIR/" "$AMS_DST_SOFTREPO/$AMS_PACKAGE_DIR/" >> $LOG_FILE 2>&1
        if [ $? -ne 0 ]; then
            echo "             [FAILED]"
            echo ""
            exit 1
        else
            echo "             [SYNC]"
        fi
        ) < /dev/null
    done
}

# ==============================================================================
# ------------------------------------------------------------------------------
# ==============================================================================

test_password_less_ssh

case $ACTION in
    "amsbuilds")
        rsync_amsbuilds
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
    "softrepo")
        rsync_amscore_cache
        if [ $? -ne 0 ]; then exit 1; fi;
        rsync_softrepo
        if [ $? -ne 0 ]; then exit 1; fi;
        ;;
esac

echo ""
echo "Log file is in: $LOG_FILE"
echo ""

exit 0

# -------------------------------------------------------------------------------------
