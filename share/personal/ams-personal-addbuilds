#!/bin/bash
# ------------------------------------------------------------------------------
# Advanced Module System synchronization utility for personal site
# ------------------------------------------------------------------------------

function print_header()
{
    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "#                             *** Installing builds ***                         " | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
}

# ------------------------------------------------

show_log_error()
{
    echo "" 1>&2
    echo ">>> ERROR: Log file: $LOG_FILE" 1>&2
    tail -10 "$LOG_FILE" 1>&2
    echo "" 1>&2
}

# ------------------------------------------------

function print_usage()
{
    echo ""
    echo "    Usage: ams-personal addbuilds <[prefix1/]bldfilter1> [...]"
    echo ""
}

# --------------------------------------

function sync_ams_builds(){

    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "# 1) Syncing library of AMS builds  ..." | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE

    ams-sync personal amsbuilds >> $LOG_FILE 2>&1

    if [ $? -eq 0 ]; then
        echo "AMS builds synchronization [OK]"
    else
        echo "AMS builds synchronization [FAILED]"
        show_log_error
        exit 1
    fi
}

# --------------------------------------

function check_builds(){

    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "# 2) Checking requested builds and their dependencies ..." | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "" | tee -a $LOG_FILE

    while [ $# -ne 0 ]; do
        ABUILD="$1"
        printf ">>> %-40s ... \n" "$ABUILD"  | tee -a $LOG_FILE
        APREFIX="`dirname $ABUILD`"
        ABUILD="`basename $ABUILD`"
        if [ "$APREFIX" == "." ]; then APREFIX=""; fi
        BUILDS=`ams-map-manip --prefix "$APREFIX" getbuilds personal "$ABUILD" 2> /dev/null`
        NBUILDS=0
        for BUILD in $BUILDS; do
            printf "    %s\n" $BUILD  | tee -a $LOG_FILE
            PREFIX="`dirname $BUILD`"
            BUILD="`basename $BUILD`"
            if [ "$PREFIX" == "." ]; then PREFIX=""; fi
            for SYNC_BUILD in `ams-map-manip --prefix "$PREFIX" deepsyncdeps personal "$BUILD"`; do
                printf "    |-> %-40s\n" "$SYNC_BUILD"  | tee -a $LOG_FILE
                if [ -n "$PREFIX" ]; then SYNC_BUILD="$PREFIX/$SYNC_BUILD"; fi
                INSTALL_BUILDS="$INSTALL_BUILDS $SYNC_BUILD"
                ((NBUILDS++))
            done
            if [ -n "$PREFIX" ]; then BUILD="$PREFIX/$BUILD"; fi
            INSTALL_BUILDS="$INSTALL_BUILDS $BUILD"
            ((NBUILDS++))
        done
        printf "    Number of builds: %d\n" $NBUILDS  | tee -a $LOG_FILE
        shift
    done
    INSTALL_BUILDS="`echo $INSTALL_BUILDS | tr " " "\n" | sort -u`"
}

# --------------------------------------

function add_builds_to_map(){

    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "# 3) Adding builds to the map ..." | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "" | tee -a $LOG_FILE
    echo "Number of builds: `echo $INSTALL_BUILDS | wc --words`" | tee -a $LOG_FILE
    echo "" | tee -a $LOG_FILE

    for BUILD in $INSTALL_BUILDS; do
        echo -n "Adding $BUILD ... " | tee -a $LOG_FILE
        PREFIX="`dirname $BUILD`"
        BUILD="`basename $BUILD`"
        if [ "$PREFIX" == "." ]; then PREFIX=""; fi
        ams-map-manip --prefix "$PREFIX" addbuilds all "$BUILD" >> $LOG_FILE 2>&1
        if [ $? -ne 0 ]; then
            echo "             [FAILED]"
            show_log_error
            exit 1
        else
            echo "             [SYNC]"
        fi
    done
}

# --------------------------------------

function rebuild_map_and_cache(){

    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "# 4) Rebuilding map and cache ..." | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE

    umask 022

    ams-map-manip distribute  >> $LOG_FILE 2>&1
    if [ $? -eq 0 ]; then
        echo "AMS map distributed [OK]"
    else
        echo "AMS map distributed [FAILED]"
        show_log_error
        exit 1
    fi

    ams-cache rebuildall  >> $LOG_FILE 2>&1
    if [ $? -eq 0 ]; then
        echo "AMS module cache rebuilded [OK]"
    else
        echo "AMS module cache rebuilded [FAILED]"
        show_log_error
        exit 1
    fi
}

# --------------------------------------

function sync_site(){

    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "# 5) Syncing site ..." | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE

    ams-sync personal softrepo | tee -a $LOG_FILE
}

# --------------------------------------

function print_bottom()
{
    echo "" | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "#                        *** End of build installation ***                      " | tee -a $LOG_FILE
    echo "#-------------------------------------------------------------------------------" | tee -a $LOG_FILE
    echo "" | tee -a $LOG_FILE
}

# ------------------------------------------------------------------------------

print_header

if [ "`id -u -n`" != "infinity" ]; then
    echo "" 2>&1
    echo ">>> ERROR: This script must be run by the infinity user!"  2>&1
    print_usage  2>&1
    exit 1
fi

if [ $# -le 0 ]; then
    echo "" 1>&2
    echo ">>> ERROR: Incorrect number of arguments!" 1>&2
    print_usage 2>&1
    exit 1
fi

# determine full path to the script --------------
if [ -z "$AMS_ROOT" ]; then
    echo "" 1>&2
    echo ">>> ERROR: AMS_ROOT variable is not set!" 1>&2
    echo "" 1>&2
    exit 1
fi

# ------------------------------------------------

mkdir -p "$AMS_ROOT/var/personal/logs"
if [ $? -ne 0 ]; then
    echo "" 1>&2
    echo ">>> ERROR: Unable to create $AMS_ROOT/var/personal/logs directory!" 1>&2
    echo "" 1>&2
    exit 1
fi

# log file
LOG_FILE="$AMS_ROOT/var/personal/logs/`date +%Y-%m-%d#%H:%M:%S`.log"

echo ">>> Log file: $LOG_FILE"

INSTALL_BUILDS=""
sync_ams_builds
check_builds "$@"
add_builds_to_map
rebuild_map_and_cache
sync_site

echo ""
echo "END: Log file is in: $LOG_FILE"

print_bottom



